<head>
    <link rel="stylesheet" href="/index.css" />
    <link rel="stylesheet" href="/tasks.css" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
</head>

<%# The done buttons send a fetch request to /tasks/api/delOne/(taskid) which will set the complete status to true, and send back a status so that the div can be removed correctly %>

<body>
    <div id="mainBody">
        <%- include('./partials/sidebar.ejs') %>
        <%- include('./partials/header.ejs') %>

        <div class="taskHeader">
            <h3><a href="/tasks/history">History</a></h3>
            <form action="javascript:sendAddition()" method="post">
                <label for="taskName">Add Task:</label><br />
                <input type="text" id="taskAdd" name="taskAdd" required /><br />
                <lavel for="taskAddDesc">Description:</lavel><br />
                <input type="text" id="taskDesc" name="taskAddDesc" /><br />
                <button id="addTaskBtn">Add</button>
            </form>
        </div>

        <div id="taskListContainer">
        </div>
     </div>
</body>

<script>
    // <%# There may be a formatter for EJS in visual studio 2021, the // before the code block will work for now %>
    checkUpdate();

    addEventListener("resize", (event) => {
        let mobile = (window.innerWidth / window.innerHeight < 1) ? true : false;
        const descriptors = document.querySelectorAll(".taskIndividual p");
        if (mobile) {
            descriptors.forEach((e) => {
                e.style.fontSize = '0px';
            });
        }
        else {
            descriptors.forEach((e) => {
                e.style.fontSize = '20px';
            });
        }
    });

    async function checkUpdate() {
        if (document.visibilityState === 'visible') {
            const fetchValues = await fetch('/tasks/api/fetchAll');
            const fetchJSON = await fetchValues.json();
            const fromUpdate = fetchJSON.map(e => e._id);
            const fromBrowser = Array.from(document.querySelectorAll('.taskList')).map(e => e.id);

            // <%# Filter results into two arrays so we can add and remove divs %>
            const toAddArr = fromUpdate.filter(x => !fromBrowser.includes(x)); 
            const toRemoveArr = fromBrowser.filter(x => !fromUpdate.includes(x));

            toAddArr.forEach((e) => {
                jsonParent = fetchJSON.filter((ele, _) => ele._id === e);
                insertUpdated(e, jsonParent[0].title, jsonParent[0].description);
            });

            toRemoveArr.forEach((e) => {
                removeUpdated(e);
            });
        };
    };

    async function sendAddition() {
        let title = document.getElementById("taskAdd");
        let description = document.getElementById("taskDesc");

        const sendData = {"title": title.value, "description": description.value}
        const fetchSend = await fetch('/tasks/api/addOne/', {
            method: "POST",
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(sendData)
        });

        const fetchJSON = await fetchSend.json();

        if (fetchJSON.success) {
            insertUpdated(fetchJSON.id, title.value, description.value.length === 0 ? "No description" : description.value);
            title.value = "";
            description.value = "";
        }
        else {
            alert(`Could not insert the task ${title.value}, may be sending too quickly`);
        }

    };

    function removeUpdated(id) {
        const elementToPop = document.getElementById(id);
        elementToPop.remove();
    };

    async function sendRemoval(id) {
        const sendData = { "popid": id };
        const fetchSend = await fetch('/tasks/api/delOne/', {
            method: "POST",
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(sendData)
        });

        const fetchJSON = await fetchSend.json();

        if (fetchJSON.success) {
            removeUpdated(id);
        }
        else {
            alert("Could not remove, you may be trying to remove too quickly.")
        }
    }

    function insertUpdated(id, title, description) { // <%# Building the div and assigning formatting classnames and id's %>
        const container = document.getElementById("taskListContainer");
        const outerIndividualDiv = document.createElement("div");
        const innerIndividualDiv = outerIndividualDiv.appendChild(document.createElement("div"));
        const innerIndivForm = innerIndividualDiv.appendChild(document.createElement("form"));
        const innerFormButton = innerIndivForm.appendChild(document.createElement("button"));
        const innerIndivTitle = innerIndividualDiv.appendChild(document.createElement("h3"));
        const indivTitleAnchor = innerIndivTitle.appendChild(document.createElement("a"));
        const indivDescription = innerIndividualDiv.appendChild(document.createElement("p"));

        innerFormButton.textContent = "Done";
        indivTitleAnchor.textContent = title;
        indivDescription.textContent = description
        Object.assign(outerIndividualDiv, { "id": id, "className": "taskList" });
        Object.assign(innerIndividualDiv, { "className": "taskIndividual" });
        Object.assign(innerIndivForm, { "action": `javascript:sendRemoval('${id}')`, "method": "post" });
        Object.assign(innerFormButton, { "type": "submit", "name": "completereq", "id": "submitComplete", "value": id });
        Object.assign(indivTitleAnchor, { "className": "taskJump", "href": `/tasks/id/${id}` })

        if (mobile) {
            indivDescription.style.fontSize = "0px"; // Need a better way of formatting this stuff.
        };
        container.appendChild(outerIndividualDiv);
    };

    setInterval(checkUpdate, 5000);
</script>